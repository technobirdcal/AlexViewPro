name: Build e Notifica AlexViewPro

on:
  push:
    branches:
      - main

jobs:
  build-and-notify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout cÃ³digo
        uses: actions/checkout@v3

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build APK
        run: |
          chmod +x ./gradlew
          ./gradlew assembleDebug

      - name: Criar Release e Enviar APK
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          TAG: alexview-${{ github.run_number }}
        run: |
          apk_path="app/build/outputs/apk/debug/app-debug.apk"

          # Cria release
          release_response=$(curl -s -X POST https://api.github.com/repos/${{ github.repository }}/releases \
            -H "Authorization: token $GH_TOKEN" \
            -d "{\"tag_name\":\"$TAG\",\"name\":\"$TAG\",\"body\":\"Automatic Actions Build by Alex\",\"draft\":false,\"prerelease\":false}")

          upload_url=$(echo "$release_response" | grep upload_url | cut -d '"' -f4 | sed 's/{?name,label}//')

          # Envia APK
          curl --data-binary @"$apk_path" \
            -H "Authorization: token $GH_TOKEN" \
            -H "Content-Type: application/vnd.android.package-archive" \
            "$upload_url?name=AlexViewPro.apk"

          # Salva URL da release para prÃ³ximo step
          echo "RELEASE_URL=$(echo $release_response | jq -r .html_url)" >> $GITHUB_ENV
          echo "RELEASE_NAME=$TAG" >> $GITHUB_ENV

      - name: Notificar Telegram
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          TEXT="ðŸš€ *New Version Released!*: $RELEASE_NAME\n\nðŸ”— [Download]($RELEASE_URL)"
          curl -s -X POST https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d text="$TEXT" \
            -d parse_mode="Markdown"
